#pragma once

// stdio.h â€” standard buffered input/output

#include <stdarg.h>    // va_list
#include <stddef.h>    // size_t
#include <sys/types.h> // off_t, ssize_t

#ifndef NULL
#define NULL (0)
#endif

#define EOF (-1)

#define SEEK_SET 0 /* Seek relative to start-of-file. */
#define SEEK_CUR 1 /* Seek relative to current position. */
#define SEEK_END 2 /* Seek relative to end-of-file. */

#define BUFSIZ 1024 /* Size of <stdio.h> buffers. */

// Number of streams which the implementation guarantees can
//  be open simultaneously. The value is at least eight.
#define FOPEN_MAX 20

// Maximum size in bytes of the longest pathname
// that the implementation guarantees can be opened.
#define FILENAME_MAX 1024

// Minimum number of unique filenames generated by tmpnam().
// Maximum number of times an application can call tmpnam() reliably.
// The value of {TMP_MAX} is at least 25.
#define TMP_MAX 25

// TODO
// Maximum size of character array to hold ctermid() output.
#define L_ctermid void
// Maximum size of character array to hold tmpnam() output.
#define L_tmpnam

// TODO
// Input/output fully buffered.
#define _IOFBF 0
// Input/output line buffered.
#define _IOLBF 1
// Input/output unbuffered.
#define _IONBF 2

// A structure containing information about a file.
typedef struct FILE FILE;

typedef size_t fpos_t;

extern FILE *stderr; /* Standard output stream. */
extern FILE *stdin;  /* Standard input stream.*/
extern FILE *stdout; /* Standard error output stream. */

// - check and reset stream status
void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
int fileno(FILE *stream);

// - formatted output conversion
int printf(const char *format, ...);
int fprintf(FILE *stream, const char *format, ...);
int dprintf(int fd, const char *format, ...);
int sprintf(char *str, const char *format, ...);
int snprintf(char *str, size_t size, const char *format, ...);

int vprintf(const char *format, va_list ap);
int vfprintf(FILE *stream, const char *format, va_list ap);
int vdprintf(int fd, const char *format, va_list ap);
int vsprintf(char *str, const char *format, va_list ap);
int vsnprintf(char *str, size_t size, const char *format, va_list ap);

// - input format conversion
int scanf(const char *format, ...);
int fscanf(FILE *stream, const char *format, ...);
int sscanf(const char *str, const char *format, ...);

int vscanf(const char *format, va_list ap);
int vsscanf(const char *str, const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);

// - stream open functions
FILE *fopen(const char *pathname, const char *mode);
FILE *fdopen(int fd, const char *mode);
FILE *freopen(const char *pathname, const char *mode, FILE *stream);

// - close a stream
int fclose(FILE *stream);

// - create a temporary file
FILE *tmpfile(void);

// - flush a stream
int fflush(FILE *stream);

// - output of characters and strings
int fputc(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
int puts(const char *s);

// - input of characters and strings
int fgetc(FILE *stream);
char *fgets(char *s, int size, FILE *stream);
int getc(FILE *stream);
int getchar(void);
int ungetc(int c, FILE *stream);

// - reposition a stream
int fseek(FILE *stream, long offset, int whence);
long ftell(FILE *stream);
void rewind(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fsetpos(FILE *stream, const fpos_t *pos);

// - binary stream input/output
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

// - rename file relative to directory file descriptor
int rename(const char *old, const char *new);
int renameat(int oldfd, const char *old, int newfd, const char *new);

// - print a system error message
void perror(const char *s);
